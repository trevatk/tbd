// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/trevatk/tbd/dns/internal/authoritative (interfaces: dht)
//
// Generated by this command:
//
//	mockgen -destination mock_dht_test.go -package authoritative . dht
//

// Package authoritative is a generated GoMock package.
package authoritative

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockdht is a mock of dht interface.
type Mockdht struct {
	ctrl     *gomock.Controller
	recorder *MockdhtMockRecorder
	isgomock struct{}
}

// MockdhtMockRecorder is the mock recorder for Mockdht.
type MockdhtMockRecorder struct {
	mock *Mockdht
}

// NewMockdht creates a new mock instance.
func NewMockdht(ctrl *gomock.Controller) *Mockdht {
	mock := &Mockdht{ctrl: ctrl}
	mock.recorder = &MockdhtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdht) EXPECT() *MockdhtMockRecorder {
	return m.recorder
}

// addNode mocks base method.
func (m *Mockdht) addNode(arg0 context.Context, arg1 *node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addNode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// addNode indicates an expected call of addNode.
func (mr *MockdhtMockRecorder) addNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addNode", reflect.TypeOf((*Mockdht)(nil).addNode), arg0, arg1)
}

// findClosestNodes mocks base method.
func (m *Mockdht) findClosestNodes(arg0 nodeID) []*node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "findClosestNodes", arg0)
	ret0, _ := ret[0].([]*node)
	return ret0
}

// findClosestNodes indicates an expected call of findClosestNodes.
func (mr *MockdhtMockRecorder) findClosestNodes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "findClosestNodes", reflect.TypeOf((*Mockdht)(nil).findClosestNodes), arg0)
}

// findNode mocks base method.
func (m *Mockdht) findNode(arg0 context.Context, arg1 nodeID) ([]*node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "findNode", arg0, arg1)
	ret0, _ := ret[0].([]*node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// findNode indicates an expected call of findNode.
func (mr *MockdhtMockRecorder) findNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "findNode", reflect.TypeOf((*Mockdht)(nil).findNode), arg0, arg1)
}

// findValue mocks base method.
func (m *Mockdht) findValue(arg0 context.Context, arg1 nodeID) (*record, []*node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "findValue", arg0, arg1)
	ret0, _ := ret[0].(*record)
	ret1, _ := ret[1].([]*node)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// findValue indicates an expected call of findValue.
func (mr *MockdhtMockRecorder) findValue(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "findValue", reflect.TypeOf((*Mockdht)(nil).findValue), arg0, arg1)
}

// getSelf mocks base method.
func (m *Mockdht) getSelf() *node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getSelf")
	ret0, _ := ret[0].(*node)
	return ret0
}

// getSelf indicates an expected call of getSelf.
func (mr *MockdhtMockRecorder) getSelf() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getSelf", reflect.TypeOf((*Mockdht)(nil).getSelf))
}

// getValue mocks base method.
func (m *Mockdht) getValue(arg0 string) (*record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getValue", arg0)
	ret0, _ := ret[0].(*record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getValue indicates an expected call of getValue.
func (mr *MockdhtMockRecorder) getValue(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getValue", reflect.TypeOf((*Mockdht)(nil).getValue), arg0)
}

// setValue mocks base method.
func (m *Mockdht) setValue(arg0 string, arg1 *record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setValue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// setValue indicates an expected call of setValue.
func (mr *MockdhtMockRecorder) setValue(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setValue", reflect.TypeOf((*Mockdht)(nil).setValue), arg0, arg1)
}
