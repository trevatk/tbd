// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/trevatk/tbd/dns/internal/namserver (interfaces: kv)
//
// Generated by this command:
//
//	mockgen -destination mock_kv_test.go -package nameserver . kv
//

// Package nameserver is a generated GoMock package.
package nameserver

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockkv is a mock of kv interface.
type Mockkv struct {
	ctrl     *gomock.Controller
	recorder *MockkvMockRecorder
	isgomock struct{}
}

// MockkvMockRecorder is the mock recorder for Mockkv.
type MockkvMockRecorder struct {
	mock *Mockkv
}

// NewMockkv creates a new mock instance.
func NewMockkv(ctrl *gomock.Controller) *Mockkv {
	mock := &Mockkv{ctrl: ctrl}
	mock.recorder = &MockkvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockkv) EXPECT() *MockkvMockRecorder {
	return m.recorder
}

// get mocks base method.
func (m *Mockkv) get(arg0 string) (*record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "get", arg0)
	ret0, _ := ret[0].(*record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// get indicates an expected call of get.
func (mr *MockkvMockRecorder) get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "get", reflect.TypeOf((*Mockkv)(nil).get), arg0)
}

// set mocks base method.
func (m *Mockkv) set(arg0 string, arg1 *record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// set indicates an expected call of set.
func (mr *MockkvMockRecorder) set(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "set", reflect.TypeOf((*Mockkv)(nil).set), arg0, arg1)
}
