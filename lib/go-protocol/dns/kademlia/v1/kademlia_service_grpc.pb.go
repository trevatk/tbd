// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: dns/kademlia/v1/kademlia_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KademliaService_Ping_FullMethodName      = "/dns.kademlia.v1.KademliaService/Ping"
	KademliaService_Store_FullMethodName     = "/dns.kademlia.v1.KademliaService/Store"
	KademliaService_FindNode_FullMethodName  = "/dns.kademlia.v1.KademliaService/FindNode"
	KademliaService_FindValue_FullMethodName = "/dns.kademlia.v1.KademliaService/FindValue"
)

// KademliaServiceClient is the client API for KademliaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KademliaServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	FindNode(ctx context.Context, in *FindNodeRequest, opts ...grpc.CallOption) (*FindNodeResponse, error)
	FindValue(ctx context.Context, in *FindValueRequest, opts ...grpc.CallOption) (*FindValueResponse, error)
}

type kademliaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKademliaServiceClient(cc grpc.ClientConnInterface) KademliaServiceClient {
	return &kademliaServiceClient{cc}
}

func (c *kademliaServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, KademliaService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kademliaServiceClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, KademliaService_Store_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kademliaServiceClient) FindNode(ctx context.Context, in *FindNodeRequest, opts ...grpc.CallOption) (*FindNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindNodeResponse)
	err := c.cc.Invoke(ctx, KademliaService_FindNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kademliaServiceClient) FindValue(ctx context.Context, in *FindValueRequest, opts ...grpc.CallOption) (*FindValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindValueResponse)
	err := c.cc.Invoke(ctx, KademliaService_FindValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KademliaServiceServer is the server API for KademliaService service.
// All implementations must embed UnimplementedKademliaServiceServer
// for forward compatibility.
type KademliaServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Store(context.Context, *StoreRequest) (*StoreResponse, error)
	FindNode(context.Context, *FindNodeRequest) (*FindNodeResponse, error)
	FindValue(context.Context, *FindValueRequest) (*FindValueResponse, error)
	mustEmbedUnimplementedKademliaServiceServer()
}

// UnimplementedKademliaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKademliaServiceServer struct{}

func (UnimplementedKademliaServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedKademliaServiceServer) Store(context.Context, *StoreRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedKademliaServiceServer) FindNode(context.Context, *FindNodeRequest) (*FindNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNode not implemented")
}
func (UnimplementedKademliaServiceServer) FindValue(context.Context, *FindValueRequest) (*FindValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindValue not implemented")
}
func (UnimplementedKademliaServiceServer) mustEmbedUnimplementedKademliaServiceServer() {}
func (UnimplementedKademliaServiceServer) testEmbeddedByValue()                         {}

// UnsafeKademliaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KademliaServiceServer will
// result in compilation errors.
type UnsafeKademliaServiceServer interface {
	mustEmbedUnimplementedKademliaServiceServer()
}

func RegisterKademliaServiceServer(s grpc.ServiceRegistrar, srv KademliaServiceServer) {
	// If the following call pancis, it indicates UnimplementedKademliaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KademliaService_ServiceDesc, srv)
}

func _KademliaService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KademliaServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KademliaService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KademliaServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KademliaService_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KademliaServiceServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KademliaService_Store_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KademliaServiceServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KademliaService_FindNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KademliaServiceServer).FindNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KademliaService_FindNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KademliaServiceServer).FindNode(ctx, req.(*FindNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KademliaService_FindValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KademliaServiceServer).FindValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KademliaService_FindValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KademliaServiceServer).FindValue(ctx, req.(*FindValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KademliaService_ServiceDesc is the grpc.ServiceDesc for KademliaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KademliaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dns.kademlia.v1.KademliaService",
	HandlerType: (*KademliaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _KademliaService_Ping_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _KademliaService_Store_Handler,
		},
		{
			MethodName: "FindNode",
			Handler:    _KademliaService_FindNode_Handler,
		},
		{
			MethodName: "FindValue",
			Handler:    _KademliaService_FindValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dns/kademlia/v1/kademlia_service.proto",
}
