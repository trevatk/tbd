// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: identities/v1/identities_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IdentitiesService_CreateRealm_FullMethodName = "/identities.v1.IdentitiesService/CreateRealm"
	IdentitiesService_CreateUser_FullMethodName  = "/identities.v1.IdentitiesService/CreateUser"
)

// IdentitiesServiceClient is the client API for IdentitiesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentitiesServiceClient interface {
	CreateRealm(ctx context.Context, in *CreateRealmRequest, opts ...grpc.CallOption) (*CreateRealmResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
}

type identitiesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentitiesServiceClient(cc grpc.ClientConnInterface) IdentitiesServiceClient {
	return &identitiesServiceClient{cc}
}

func (c *identitiesServiceClient) CreateRealm(ctx context.Context, in *CreateRealmRequest, opts ...grpc.CallOption) (*CreateRealmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRealmResponse)
	err := c.cc.Invoke(ctx, IdentitiesService_CreateRealm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitiesServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, IdentitiesService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentitiesServiceServer is the server API for IdentitiesService service.
// All implementations must embed UnimplementedIdentitiesServiceServer
// for forward compatibility.
type IdentitiesServiceServer interface {
	CreateRealm(context.Context, *CreateRealmRequest) (*CreateRealmResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	mustEmbedUnimplementedIdentitiesServiceServer()
}

// UnimplementedIdentitiesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIdentitiesServiceServer struct{}

func (UnimplementedIdentitiesServiceServer) CreateRealm(context.Context, *CreateRealmRequest) (*CreateRealmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRealm not implemented")
}
func (UnimplementedIdentitiesServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedIdentitiesServiceServer) mustEmbedUnimplementedIdentitiesServiceServer() {}
func (UnimplementedIdentitiesServiceServer) testEmbeddedByValue()                           {}

// UnsafeIdentitiesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentitiesServiceServer will
// result in compilation errors.
type UnsafeIdentitiesServiceServer interface {
	mustEmbedUnimplementedIdentitiesServiceServer()
}

func RegisterIdentitiesServiceServer(s grpc.ServiceRegistrar, srv IdentitiesServiceServer) {
	// If the following call pancis, it indicates UnimplementedIdentitiesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IdentitiesService_ServiceDesc, srv)
}

func _IdentitiesService_CreateRealm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRealmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitiesServiceServer).CreateRealm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentitiesService_CreateRealm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitiesServiceServer).CreateRealm(ctx, req.(*CreateRealmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitiesService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitiesServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentitiesService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitiesServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentitiesService_ServiceDesc is the grpc.ServiceDesc for IdentitiesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentitiesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identities.v1.IdentitiesService",
	HandlerType: (*IdentitiesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRealm",
			Handler:    _IdentitiesService_CreateRealm_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _IdentitiesService_CreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identities/v1/identities_service.proto",
}
