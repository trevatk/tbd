// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: dns/resolver/v1/resolver_service.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordType int32

const (
	RecordType_RECORD_TYPE_UNSPECIFIED RecordType = 0
	RecordType_RECORD_TYPE_NS          RecordType = 1
	RecordType_RECORD_TYPE_A           RecordType = 2
	RecordType_RECORD_TYPE_AAA         RecordType = 3
	RecordType_RECORD_TYPE_CNAME       RecordType = 4
	RecordType_RECORD_TYPE_TXT         RecordType = 5
	RecordType_RECORD_TYPE_MX          RecordType = 6
	RecordType_RECORD_TYPE_DID         RecordType = 7
)

// Enum value maps for RecordType.
var (
	RecordType_name = map[int32]string{
		0: "RECORD_TYPE_UNSPECIFIED",
		1: "RECORD_TYPE_NS",
		2: "RECORD_TYPE_A",
		3: "RECORD_TYPE_AAA",
		4: "RECORD_TYPE_CNAME",
		5: "RECORD_TYPE_TXT",
		6: "RECORD_TYPE_MX",
		7: "RECORD_TYPE_DID",
	}
	RecordType_value = map[string]int32{
		"RECORD_TYPE_UNSPECIFIED": 0,
		"RECORD_TYPE_NS":          1,
		"RECORD_TYPE_A":           2,
		"RECORD_TYPE_AAA":         3,
		"RECORD_TYPE_CNAME":       4,
		"RECORD_TYPE_TXT":         5,
		"RECORD_TYPE_MX":          6,
		"RECORD_TYPE_DID":         7,
	}
)

func (x RecordType) Enum() *RecordType {
	p := new(RecordType)
	*p = x
	return p
}

func (x RecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_dns_resolver_v1_resolver_service_proto_enumTypes[0].Descriptor()
}

func (RecordType) Type() protoreflect.EnumType {
	return &file_dns_resolver_v1_resolver_service_proto_enumTypes[0]
}

func (x RecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordType.Descriptor instead.
func (RecordType) EnumDescriptor() ([]byte, []int) {
	return file_dns_resolver_v1_resolver_service_proto_rawDescGZIP(), []int{0}
}

type ResolveResponse_ResponseStatus int32

const (
	ResolveResponse_RESPONSE_STATUS_UNSPECIFIED          ResolveResponse_ResponseStatus = 0
	ResolveResponse_RESPONSE_STATUS_SUCCESS              ResolveResponse_ResponseStatus = 1
	ResolveResponse_RESPONSE_STATUS_NAME_ERROR           ResolveResponse_ResponseStatus = 2
	ResolveResponse_RESPONSE_STATUS_NOT_IMPLEMENTED      ResolveResponse_ResponseStatus = 3
	ResolveResponse_RESPONSE_STATUS_REFUSED              ResolveResponse_ResponseStatus = 4
	ResolveResponse_RESPONSE_STATUS_NO_DATA              ResolveResponse_ResponseStatus = 5
	ResolveResponse_RESPONSE_STATUS_TIMEOUT              ResolveResponse_ResponseStatus = 6
	ResolveResponse_RESPONSE_STATUS_DID_NOT_FOUND        ResolveResponse_ResponseStatus = 7
	ResolveResponse_RESPONSE_STATUS_DID_RESOLUTION_ERROR ResolveResponse_ResponseStatus = 8
)

// Enum value maps for ResolveResponse_ResponseStatus.
var (
	ResolveResponse_ResponseStatus_name = map[int32]string{
		0: "RESPONSE_STATUS_UNSPECIFIED",
		1: "RESPONSE_STATUS_SUCCESS",
		2: "RESPONSE_STATUS_NAME_ERROR",
		3: "RESPONSE_STATUS_NOT_IMPLEMENTED",
		4: "RESPONSE_STATUS_REFUSED",
		5: "RESPONSE_STATUS_NO_DATA",
		6: "RESPONSE_STATUS_TIMEOUT",
		7: "RESPONSE_STATUS_DID_NOT_FOUND",
		8: "RESPONSE_STATUS_DID_RESOLUTION_ERROR",
	}
	ResolveResponse_ResponseStatus_value = map[string]int32{
		"RESPONSE_STATUS_UNSPECIFIED":          0,
		"RESPONSE_STATUS_SUCCESS":              1,
		"RESPONSE_STATUS_NAME_ERROR":           2,
		"RESPONSE_STATUS_NOT_IMPLEMENTED":      3,
		"RESPONSE_STATUS_REFUSED":              4,
		"RESPONSE_STATUS_NO_DATA":              5,
		"RESPONSE_STATUS_TIMEOUT":              6,
		"RESPONSE_STATUS_DID_NOT_FOUND":        7,
		"RESPONSE_STATUS_DID_RESOLUTION_ERROR": 8,
	}
)

func (x ResolveResponse_ResponseStatus) Enum() *ResolveResponse_ResponseStatus {
	p := new(ResolveResponse_ResponseStatus)
	*p = x
	return p
}

func (x ResolveResponse_ResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolveResponse_ResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dns_resolver_v1_resolver_service_proto_enumTypes[1].Descriptor()
}

func (ResolveResponse_ResponseStatus) Type() protoreflect.EnumType {
	return &file_dns_resolver_v1_resolver_service_proto_enumTypes[1]
}

func (x ResolveResponse_ResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResolveResponse_ResponseStatus.Descriptor instead.
func (ResolveResponse_ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_dns_resolver_v1_resolver_service_proto_rawDescGZIP(), []int{4, 0}
}

type Q struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	RecordType    RecordType             `protobuf:"varint,2,opt,name=record_type,json=recordType,proto3,enum=dns.resolver.v1.RecordType" json:"record_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Q) Reset() {
	*x = Q{}
	mi := &file_dns_resolver_v1_resolver_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Q) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Q) ProtoMessage() {}

func (x *Q) ProtoReflect() protoreflect.Message {
	mi := &file_dns_resolver_v1_resolver_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Q.ProtoReflect.Descriptor instead.
func (*Q) Descriptor() ([]byte, []int) {
	return file_dns_resolver_v1_resolver_service_proto_rawDescGZIP(), []int{0}
}

func (x *Q) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Q) GetRecordType() RecordType {
	if x != nil {
		return x.RecordType
	}
	return RecordType_RECORD_TYPE_UNSPECIFIED
}

type ResolveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Question      *Q                     `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	DidToResolve  string                 `protobuf:"bytes,2,opt,name=did_to_resolve,json=didToResolve,proto3" json:"did_to_resolve,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveRequest) Reset() {
	*x = ResolveRequest{}
	mi := &file_dns_resolver_v1_resolver_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveRequest) ProtoMessage() {}

func (x *ResolveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dns_resolver_v1_resolver_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveRequest.ProtoReflect.Descriptor instead.
func (*ResolveRequest) Descriptor() ([]byte, []int) {
	return file_dns_resolver_v1_resolver_service_proto_rawDescGZIP(), []int{1}
}

func (x *ResolveRequest) GetQuestion() *Q {
	if x != nil {
		return x.Question
	}
	return nil
}

func (x *ResolveRequest) GetDidToResolve() string {
	if x != nil {
		return x.DidToResolve
	}
	return ""
}

type RecordData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to RawDataType:
	//
	//	*RecordData_Ns
	//	*RecordData_A
	//	*RecordData_Did
	RawDataType   isRecordData_RawDataType `protobuf_oneof:"raw_data_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordData) Reset() {
	*x = RecordData{}
	mi := &file_dns_resolver_v1_resolver_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordData) ProtoMessage() {}

func (x *RecordData) ProtoReflect() protoreflect.Message {
	mi := &file_dns_resolver_v1_resolver_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordData.ProtoReflect.Descriptor instead.
func (*RecordData) Descriptor() ([]byte, []int) {
	return file_dns_resolver_v1_resolver_service_proto_rawDescGZIP(), []int{2}
}

func (x *RecordData) GetRawDataType() isRecordData_RawDataType {
	if x != nil {
		return x.RawDataType
	}
	return nil
}

func (x *RecordData) GetNs() *RecordData_NSRecord {
	if x != nil {
		if x, ok := x.RawDataType.(*RecordData_Ns); ok {
			return x.Ns
		}
	}
	return nil
}

func (x *RecordData) GetA() *RecordData_ARecord {
	if x != nil {
		if x, ok := x.RawDataType.(*RecordData_A); ok {
			return x.A
		}
	}
	return nil
}

func (x *RecordData) GetDid() *RecordData_DIDRecord {
	if x != nil {
		if x, ok := x.RawDataType.(*RecordData_Did); ok {
			return x.Did
		}
	}
	return nil
}

type isRecordData_RawDataType interface {
	isRecordData_RawDataType()
}

type RecordData_Ns struct {
	Ns *RecordData_NSRecord `protobuf:"bytes,1,opt,name=ns,proto3,oneof"`
}

type RecordData_A struct {
	A *RecordData_ARecord `protobuf:"bytes,2,opt,name=a,proto3,oneof"`
}

type RecordData_Did struct {
	Did *RecordData_DIDRecord `protobuf:"bytes,3,opt,name=did,proto3,oneof"`
}

func (*RecordData_Ns) isRecordData_RawDataType() {}

func (*RecordData_A) isRecordData_RawDataType() {}

func (*RecordData_Did) isRecordData_RawDataType() {}

type Record struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	RecordType    RecordType             `protobuf:"varint,2,opt,name=record_type,json=recordType,proto3,enum=dns.resolver.v1.RecordType" json:"record_type,omitempty"`
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Ttl           int64                  `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Record) Reset() {
	*x = Record{}
	mi := &file_dns_resolver_v1_resolver_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_dns_resolver_v1_resolver_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_dns_resolver_v1_resolver_service_proto_rawDescGZIP(), []int{3}
}

func (x *Record) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Record) GetRecordType() RecordType {
	if x != nil {
		return x.RecordType
	}
	return RecordType_RECORD_TYPE_UNSPECIFIED
}

func (x *Record) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Record) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type ResolveResponse struct {
	state                   protoimpl.MessageState         `protogen:"open.v1"`
	Answer                  []*Record                      `protobuf:"bytes,1,rep,name=answer,proto3" json:"answer,omitempty"`
	Authority               []*Record                      `protobuf:"bytes,2,rep,name=authority,proto3" json:"authority,omitempty"`   // ns records
	Additional              []*Record                      `protobuf:"bytes,3,rep,name=additional,proto3" json:"additional,omitempty"` // a records
	Status                  ResolveResponse_ResponseStatus `protobuf:"varint,4,opt,name=status,proto3,enum=dns.resolver.v1.ResolveResponse_ResponseStatus" json:"status,omitempty"`
	ErrorMessage            string                         `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	AuthoritativeAnswer     bool                           `protobuf:"varint,6,opt,name=authoritative_answer,json=authoritativeAnswer,proto3" json:"authoritative_answer,omitempty"`
	ResolvedDidDocumentJson string                         `protobuf:"bytes,7,opt,name=resolved_did_document_json,json=resolvedDidDocumentJson,proto3" json:"resolved_did_document_json,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ResolveResponse) Reset() {
	*x = ResolveResponse{}
	mi := &file_dns_resolver_v1_resolver_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveResponse) ProtoMessage() {}

func (x *ResolveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dns_resolver_v1_resolver_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveResponse.ProtoReflect.Descriptor instead.
func (*ResolveResponse) Descriptor() ([]byte, []int) {
	return file_dns_resolver_v1_resolver_service_proto_rawDescGZIP(), []int{4}
}

func (x *ResolveResponse) GetAnswer() []*Record {
	if x != nil {
		return x.Answer
	}
	return nil
}

func (x *ResolveResponse) GetAuthority() []*Record {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *ResolveResponse) GetAdditional() []*Record {
	if x != nil {
		return x.Additional
	}
	return nil
}

func (x *ResolveResponse) GetStatus() ResolveResponse_ResponseStatus {
	if x != nil {
		return x.Status
	}
	return ResolveResponse_RESPONSE_STATUS_UNSPECIFIED
}

func (x *ResolveResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ResolveResponse) GetAuthoritativeAnswer() bool {
	if x != nil {
		return x.AuthoritativeAnswer
	}
	return false
}

func (x *ResolveResponse) GetResolvedDidDocumentJson() string {
	if x != nil {
		return x.ResolvedDidDocumentJson
	}
	return ""
}

type RecordData_ARecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ipv4Address   []byte                 `protobuf:"bytes,1,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordData_ARecord) Reset() {
	*x = RecordData_ARecord{}
	mi := &file_dns_resolver_v1_resolver_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordData_ARecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordData_ARecord) ProtoMessage() {}

func (x *RecordData_ARecord) ProtoReflect() protoreflect.Message {
	mi := &file_dns_resolver_v1_resolver_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordData_ARecord.ProtoReflect.Descriptor instead.
func (*RecordData_ARecord) Descriptor() ([]byte, []int) {
	return file_dns_resolver_v1_resolver_service_proto_rawDescGZIP(), []int{2, 0}
}

func (x *RecordData_ARecord) GetIpv4Address() []byte {
	if x != nil {
		return x.Ipv4Address
	}
	return nil
}

type RecordData_NSRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordData_NSRecord) Reset() {
	*x = RecordData_NSRecord{}
	mi := &file_dns_resolver_v1_resolver_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordData_NSRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordData_NSRecord) ProtoMessage() {}

func (x *RecordData_NSRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dns_resolver_v1_resolver_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordData_NSRecord.ProtoReflect.Descriptor instead.
func (*RecordData_NSRecord) Descriptor() ([]byte, []int) {
	return file_dns_resolver_v1_resolver_service_proto_rawDescGZIP(), []int{2, 1}
}

func (x *RecordData_NSRecord) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type RecordData_DIDRecord struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Url             string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	DidDocumentJson string                 `protobuf:"bytes,2,opt,name=did_document_json,json=didDocumentJson,proto3" json:"did_document_json,omitempty"`
	ProofDigest     string                 `protobuf:"bytes,3,opt,name=proof_digest,json=proofDigest,proto3" json:"proof_digest,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RecordData_DIDRecord) Reset() {
	*x = RecordData_DIDRecord{}
	mi := &file_dns_resolver_v1_resolver_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordData_DIDRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordData_DIDRecord) ProtoMessage() {}

func (x *RecordData_DIDRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dns_resolver_v1_resolver_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordData_DIDRecord.ProtoReflect.Descriptor instead.
func (*RecordData_DIDRecord) Descriptor() ([]byte, []int) {
	return file_dns_resolver_v1_resolver_service_proto_rawDescGZIP(), []int{2, 2}
}

func (x *RecordData_DIDRecord) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RecordData_DIDRecord) GetDidDocumentJson() string {
	if x != nil {
		return x.DidDocumentJson
	}
	return ""
}

func (x *RecordData_DIDRecord) GetProofDigest() string {
	if x != nil {
		return x.ProofDigest
	}
	return ""
}

var File_dns_resolver_v1_resolver_service_proto protoreflect.FileDescriptor

const file_dns_resolver_v1_resolver_service_proto_rawDesc = "" +
	"\n" +
	"&dns/resolver/v1/resolver_service.proto\x12\x0fdns.resolver.v1\"Y\n" +
	"\x01Q\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\tR\x06domain\x12<\n" +
	"\vrecord_type\x18\x02 \x01(\x0e2\x1b.dns.resolver.v1.RecordTypeR\n" +
	"recordType\"f\n" +
	"\x0eResolveRequest\x12.\n" +
	"\bquestion\x18\x01 \x01(\v2\x12.dns.resolver.v1.QR\bquestion\x12$\n" +
	"\x0edid_to_resolve\x18\x02 \x01(\tR\fdidToResolve\"\x85\x03\n" +
	"\n" +
	"RecordData\x126\n" +
	"\x02ns\x18\x01 \x01(\v2$.dns.resolver.v1.RecordData.NSRecordH\x00R\x02ns\x123\n" +
	"\x01a\x18\x02 \x01(\v2#.dns.resolver.v1.RecordData.ARecordH\x00R\x01a\x129\n" +
	"\x03did\x18\x03 \x01(\v2%.dns.resolver.v1.RecordData.DIDRecordH\x00R\x03did\x1a,\n" +
	"\aARecord\x12!\n" +
	"\fipv4_address\x18\x01 \x01(\fR\vipv4Address\x1a\"\n" +
	"\bNSRecord\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\tR\x06domain\x1al\n" +
	"\tDIDRecord\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12*\n" +
	"\x11did_document_json\x18\x02 \x01(\tR\x0fdidDocumentJson\x12!\n" +
	"\fproof_digest\x18\x03 \x01(\tR\vproofDigestB\x0f\n" +
	"\rraw_data_type\"\x86\x01\n" +
	"\x06Record\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\tR\x06domain\x12<\n" +
	"\vrecord_type\x18\x02 \x01(\x0e2\x1b.dns.resolver.v1.RecordTypeR\n" +
	"recordType\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\x12\x10\n" +
	"\x03ttl\x18\x04 \x01(\x03R\x03ttl\"\xca\x05\n" +
	"\x0fResolveResponse\x12/\n" +
	"\x06answer\x18\x01 \x03(\v2\x17.dns.resolver.v1.RecordR\x06answer\x125\n" +
	"\tauthority\x18\x02 \x03(\v2\x17.dns.resolver.v1.RecordR\tauthority\x127\n" +
	"\n" +
	"additional\x18\x03 \x03(\v2\x17.dns.resolver.v1.RecordR\n" +
	"additional\x12G\n" +
	"\x06status\x18\x04 \x01(\x0e2/.dns.resolver.v1.ResolveResponse.ResponseStatusR\x06status\x12#\n" +
	"\rerror_message\x18\x05 \x01(\tR\ferrorMessage\x121\n" +
	"\x14authoritative_answer\x18\x06 \x01(\bR\x13authoritativeAnswer\x12;\n" +
	"\x1aresolved_did_document_json\x18\a \x01(\tR\x17resolvedDidDocumentJson\"\xb7\x02\n" +
	"\x0eResponseStatus\x12\x1f\n" +
	"\x1bRESPONSE_STATUS_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17RESPONSE_STATUS_SUCCESS\x10\x01\x12\x1e\n" +
	"\x1aRESPONSE_STATUS_NAME_ERROR\x10\x02\x12#\n" +
	"\x1fRESPONSE_STATUS_NOT_IMPLEMENTED\x10\x03\x12\x1b\n" +
	"\x17RESPONSE_STATUS_REFUSED\x10\x04\x12\x1b\n" +
	"\x17RESPONSE_STATUS_NO_DATA\x10\x05\x12\x1b\n" +
	"\x17RESPONSE_STATUS_TIMEOUT\x10\x06\x12!\n" +
	"\x1dRESPONSE_STATUS_DID_NOT_FOUND\x10\a\x12(\n" +
	"$RESPONSE_STATUS_DID_RESOLUTION_ERROR\x10\b*\xba\x01\n" +
	"\n" +
	"RecordType\x12\x1b\n" +
	"\x17RECORD_TYPE_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eRECORD_TYPE_NS\x10\x01\x12\x11\n" +
	"\rRECORD_TYPE_A\x10\x02\x12\x13\n" +
	"\x0fRECORD_TYPE_AAA\x10\x03\x12\x15\n" +
	"\x11RECORD_TYPE_CNAME\x10\x04\x12\x13\n" +
	"\x0fRECORD_TYPE_TXT\x10\x05\x12\x12\n" +
	"\x0eRECORD_TYPE_MX\x10\x06\x12\x13\n" +
	"\x0fRECORD_TYPE_DID\x10\a2d\n" +
	"\x12DNSResolverService\x12N\n" +
	"\aResolve\x12\x1f.dns.resolver.v1.ResolveRequest\x1a .dns.resolver.v1.ResolveResponse\"\x00B5Z3github.com/structx/tbd/lib/protocol/dns/resolver/v1b\x06proto3"

var (
	file_dns_resolver_v1_resolver_service_proto_rawDescOnce sync.Once
	file_dns_resolver_v1_resolver_service_proto_rawDescData []byte
)

func file_dns_resolver_v1_resolver_service_proto_rawDescGZIP() []byte {
	file_dns_resolver_v1_resolver_service_proto_rawDescOnce.Do(func() {
		file_dns_resolver_v1_resolver_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dns_resolver_v1_resolver_service_proto_rawDesc), len(file_dns_resolver_v1_resolver_service_proto_rawDesc)))
	})
	return file_dns_resolver_v1_resolver_service_proto_rawDescData
}

var file_dns_resolver_v1_resolver_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dns_resolver_v1_resolver_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dns_resolver_v1_resolver_service_proto_goTypes = []any{
	(RecordType)(0),                     // 0: dns.resolver.v1.RecordType
	(ResolveResponse_ResponseStatus)(0), // 1: dns.resolver.v1.ResolveResponse.ResponseStatus
	(*Q)(nil),                           // 2: dns.resolver.v1.Q
	(*ResolveRequest)(nil),              // 3: dns.resolver.v1.ResolveRequest
	(*RecordData)(nil),                  // 4: dns.resolver.v1.RecordData
	(*Record)(nil),                      // 5: dns.resolver.v1.Record
	(*ResolveResponse)(nil),             // 6: dns.resolver.v1.ResolveResponse
	(*RecordData_ARecord)(nil),          // 7: dns.resolver.v1.RecordData.ARecord
	(*RecordData_NSRecord)(nil),         // 8: dns.resolver.v1.RecordData.NSRecord
	(*RecordData_DIDRecord)(nil),        // 9: dns.resolver.v1.RecordData.DIDRecord
}
var file_dns_resolver_v1_resolver_service_proto_depIdxs = []int32{
	0,  // 0: dns.resolver.v1.Q.record_type:type_name -> dns.resolver.v1.RecordType
	2,  // 1: dns.resolver.v1.ResolveRequest.question:type_name -> dns.resolver.v1.Q
	8,  // 2: dns.resolver.v1.RecordData.ns:type_name -> dns.resolver.v1.RecordData.NSRecord
	7,  // 3: dns.resolver.v1.RecordData.a:type_name -> dns.resolver.v1.RecordData.ARecord
	9,  // 4: dns.resolver.v1.RecordData.did:type_name -> dns.resolver.v1.RecordData.DIDRecord
	0,  // 5: dns.resolver.v1.Record.record_type:type_name -> dns.resolver.v1.RecordType
	5,  // 6: dns.resolver.v1.ResolveResponse.answer:type_name -> dns.resolver.v1.Record
	5,  // 7: dns.resolver.v1.ResolveResponse.authority:type_name -> dns.resolver.v1.Record
	5,  // 8: dns.resolver.v1.ResolveResponse.additional:type_name -> dns.resolver.v1.Record
	1,  // 9: dns.resolver.v1.ResolveResponse.status:type_name -> dns.resolver.v1.ResolveResponse.ResponseStatus
	3,  // 10: dns.resolver.v1.DNSResolverService.Resolve:input_type -> dns.resolver.v1.ResolveRequest
	6,  // 11: dns.resolver.v1.DNSResolverService.Resolve:output_type -> dns.resolver.v1.ResolveResponse
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_dns_resolver_v1_resolver_service_proto_init() }
func file_dns_resolver_v1_resolver_service_proto_init() {
	if File_dns_resolver_v1_resolver_service_proto != nil {
		return
	}
	file_dns_resolver_v1_resolver_service_proto_msgTypes[2].OneofWrappers = []any{
		(*RecordData_Ns)(nil),
		(*RecordData_A)(nil),
		(*RecordData_Did)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dns_resolver_v1_resolver_service_proto_rawDesc), len(file_dns_resolver_v1_resolver_service_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dns_resolver_v1_resolver_service_proto_goTypes,
		DependencyIndexes: file_dns_resolver_v1_resolver_service_proto_depIdxs,
		EnumInfos:         file_dns_resolver_v1_resolver_service_proto_enumTypes,
		MessageInfos:      file_dns_resolver_v1_resolver_service_proto_msgTypes,
	}.Build()
	File_dns_resolver_v1_resolver_service_proto = out.File
	file_dns_resolver_v1_resolver_service_proto_goTypes = nil
	file_dns_resolver_v1_resolver_service_proto_depIdxs = nil
}
