// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: dns/authoritative/v1/authoritative_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthoritativeService_CreateZone_FullMethodName   = "/dns.authoritative.v1.AuthoritativeService/CreateZone"
	AuthoritativeService_CreateRecord_FullMethodName = "/dns.authoritative.v1.AuthoritativeService/CreateRecord"
	AuthoritativeService_GetRecord_FullMethodName    = "/dns.authoritative.v1.AuthoritativeService/GetRecord"
)

// AuthoritativeServiceClient is the client API for AuthoritativeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthoritativeServiceClient interface {
	CreateZone(ctx context.Context, in *CreateZoneRequest, opts ...grpc.CallOption) (*CreateZoneResponse, error)
	CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error)
	GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error)
}

type authoritativeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthoritativeServiceClient(cc grpc.ClientConnInterface) AuthoritativeServiceClient {
	return &authoritativeServiceClient{cc}
}

func (c *authoritativeServiceClient) CreateZone(ctx context.Context, in *CreateZoneRequest, opts ...grpc.CallOption) (*CreateZoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateZoneResponse)
	err := c.cc.Invoke(ctx, AuthoritativeService_CreateZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authoritativeServiceClient) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRecordResponse)
	err := c.cc.Invoke(ctx, AuthoritativeService_CreateRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authoritativeServiceClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecordResponse)
	err := c.cc.Invoke(ctx, AuthoritativeService_GetRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthoritativeServiceServer is the server API for AuthoritativeService service.
// All implementations must embed UnimplementedAuthoritativeServiceServer
// for forward compatibility.
type AuthoritativeServiceServer interface {
	CreateZone(context.Context, *CreateZoneRequest) (*CreateZoneResponse, error)
	CreateRecord(context.Context, *CreateRecordRequest) (*CreateRecordResponse, error)
	GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error)
	mustEmbedUnimplementedAuthoritativeServiceServer()
}

// UnimplementedAuthoritativeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthoritativeServiceServer struct{}

func (UnimplementedAuthoritativeServiceServer) CreateZone(context.Context, *CreateZoneRequest) (*CreateZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateZone not implemented")
}
func (UnimplementedAuthoritativeServiceServer) CreateRecord(context.Context, *CreateRecordRequest) (*CreateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (UnimplementedAuthoritativeServiceServer) GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedAuthoritativeServiceServer) mustEmbedUnimplementedAuthoritativeServiceServer() {}
func (UnimplementedAuthoritativeServiceServer) testEmbeddedByValue()                              {}

// UnsafeAuthoritativeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthoritativeServiceServer will
// result in compilation errors.
type UnsafeAuthoritativeServiceServer interface {
	mustEmbedUnimplementedAuthoritativeServiceServer()
}

func RegisterAuthoritativeServiceServer(s grpc.ServiceRegistrar, srv AuthoritativeServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthoritativeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthoritativeService_ServiceDesc, srv)
}

func _AuthoritativeService_CreateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthoritativeServiceServer).CreateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthoritativeService_CreateZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthoritativeServiceServer).CreateZone(ctx, req.(*CreateZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthoritativeService_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthoritativeServiceServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthoritativeService_CreateRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthoritativeServiceServer).CreateRecord(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthoritativeService_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthoritativeServiceServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthoritativeService_GetRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthoritativeServiceServer).GetRecord(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthoritativeService_ServiceDesc is the grpc.ServiceDesc for AuthoritativeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthoritativeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dns.authoritative.v1.AuthoritativeService",
	HandlerType: (*AuthoritativeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateZone",
			Handler:    _AuthoritativeService_CreateZone_Handler,
		},
		{
			MethodName: "CreateRecord",
			Handler:    _AuthoritativeService_CreateRecord_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _AuthoritativeService_GetRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dns/authoritative/v1/authoritative_service.proto",
}
