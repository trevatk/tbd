syntax = "proto3";

package dns.kademlia.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/trevatk/tbd/lib/protocol/dns/kademlia/v1";

service KademliaService {
  rpc Ping(PingRequest) returns (PingResponse) {}
  rpc Store(StoreRequest) returns (StoreResponse) {}
  rpc FindNode(FindNodeRequest) returns (FindNodeResponse) {}
  rpc FindValue(FindValueRequest) returns (FindValueResponse) {}
}

message Node {
  string node_id = 1;
  string ip_or_domain = 2;
  uint32 port = 3;
  google.protobuf.Timestamp last_seen = 4;
}

message Record {
  string id = 1;
  string domain = 2;
  enum RECORDTYPE {
    RECORDTYPE_UNSPECIFIED = 0;
    RECORDTYPE_A = 1;
    RECORDTYPE_CNAME = 2;
    RECORDTYPE_DID = 4;
  }
  RECORDTYPE record_type = 3;
  bytes value = 4;
  int64 ttl = 5;
}

message PingRequest {
  Node sender = 1;
  string request_id = 2;
}

message PingResponse {
  Node sender = 1;
  string request_id = 2;
}

message StoreRequest {
  Node sender = 1;
  string request_id = 2;
  Record record = 3;
}

message StoreResponse {
  Node sender = 1;
  string request_id = 2;
  bool success = 3;
}

message FindNodeRequest {
  Node sender = 1;
  string request_id = 2;
  string target_node_id = 3;
}

message FindNodeResponse {
  Node sender = 1;
  string request_id = 2;
  repeated Node closest_nodes = 3;
}

message FindValueRequest {
  Node sender = 1;
  string request_id = 2;
  string key = 3;
}

message ClosestNodes {
  repeated Node nodes = 1;
}

message FindValueResponse {
  Node sender = 1;
  string request_id = 2;
  oneof result {
    Record record = 3;
    ClosestNodes closest_nodes = 4;
  }
}
